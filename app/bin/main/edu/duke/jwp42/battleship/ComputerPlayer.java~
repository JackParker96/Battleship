package edu.duke.jwp42.battleship;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.function.Function;

public class ComputerPlayer extends Player {

  private final AbstractShipFactory<Character> shipFactory;
  protected final Board<Character> theBoard;
  protected final BoardTextView view;
  private final BufferedReader input;
  protected final PrintStream out;
  // The name of a player (e.g. "A" or "B")
  protected final String name;
  // List of all ships that a player needs to place (2 subs, 3 destroyers,
  // 3 bships, 2 carriers)
  protected final ArrayList<String> shipsToPlace;
  // Map from ship names (Submarine, Battleship, etc.) to functions in
  // V1ShipFactory used to construct these ships
  private final HashMap<String, Function<Placement, Ship<Character>>> shipCreationFns;

  public ComputerPlayer(Board<Character> theBoard, AbstractShipFactory<Character> factory) {
    this.shipFactory = factory;
    this.theBoard = theBoard;
    this.view = new BoardTextView(theBoard);
    // Place ships in a simple pattern and then fire at A0 over and over and over
    this.input = new BufferedReader(new StringReader("A0h\nb0h\nc0h\nd0h\ne0h\nf0d\nh0d\nj0d\nl0r\nn0r\n" +
        "f\nA0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\nA0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\nA0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\nA0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n" +
        "f\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\nf\na0\n"));
    this.out = System.out;
    this.name = "Computer";
    // Initialize shipsToPlace to an empty ArrayList, then call
    // setupShipCreationList() to fill it up with ships
    this.shipsToPlace = new ArrayList<String>();
    setupShipCreationList();
    // Initialize shipCreationFns to an empty HashMap, then call
    // setupShipCreationMap to fill it up with mappings from ship names to the
    // functions used to create that ship
    this.shipCreationFns = new HashMap<String, Function<Placement, Ship<Character>>>();
    setupShipCreationMap();
  }

  public void playOneTurn(Board<Character> enemyBoard, BoardTextView enemyView, String enemyName) throws IOException {
    Coordinate c = new Coordinate(input.readLine());
    enemyBoard.fireAt(c);
    if (enemyBoard.whatIsAtForEnemy(c) != null) {
      System.out.println("The computer hit your ship at A0!");
    }
  }

  // Checks if the player has lost the game (all ships sunk)
  public String hasLost() {
    if (theBoard.allShipsSunk()) {
      return name;
    }
    return null;
  }

  public void doPlacementPhase() throws IOException {
    for (String shipName : shipsToPlace) {
      Function<Placement, Ship<Character>> createFn = shipCreationFns.get(shipName);
      Placement p = new Placement(input.readLine());
      Ship<Character> s = createFn.apply(p);
      theBoard.tryAddShip(s);
    }
  }
}
